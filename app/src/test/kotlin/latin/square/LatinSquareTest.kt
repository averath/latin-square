/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package latin.square

import kotlin.test.Test
import kotlin.test.assertFalse
import kotlin.test.assertTrue

class LatinSquareTest {

    private val classUnderTest = LatinSquare()

    @Test
    fun smallLatinSquare_shouldReturnTrue() {
        val square: Array<IntArray> = arrayOf(intArrayOf(1, 2), intArrayOf(2, 1))

        val result = classUnderTest.isLatinSquare(square)

        assertTrue(result)
    }

    @Test
    fun smallLatinSquare_shouldReturnTrue2() {
        val square: Array<IntArray> = arrayOf(intArrayOf(1, 2, 3), intArrayOf(3, 1, 2), intArrayOf(2, 3, 1))

        val result = classUnderTest.isLatinSquare(square)

        assertTrue(result)
    }

    @Test
    fun smallSquare_shouldReturnFalse() {
        val square: Array<IntArray> = arrayOf(intArrayOf(1, 2), intArrayOf(1, 2))

        val result = classUnderTest.isLatinSquare(square)

        assertFalse(result)
    }

    @Test
    fun smallSquare_shouldReturnFalse2() {
        val square: Array<IntArray> = arrayOf(intArrayOf(1, 2, 3), intArrayOf(2, 1, 3), intArrayOf(3, 2, 1))

        val result = classUnderTest.isLatinSquare(square)

        assertFalse(result)
    }

    @Test
    fun duplicatedInts_shouldReturnFalse() {
        val square: Array<IntArray> = arrayOf(intArrayOf(2, 2), intArrayOf(1, 1))

        val result = classUnderTest.isLatinSquare(square)

        assertFalse(result)
    }

    @Test
    fun tooBigInts_shouldReturnFalse() {
        val square: Array<IntArray> = arrayOf(intArrayOf(1, 3), intArrayOf(2, 1))

        val result = classUnderTest.isLatinSquare(square)

        assertFalse(result)
    }

    @Test
    fun tooSmallInts_shouldReturnFalse() {
        val square: Array<IntArray> = arrayOf(intArrayOf(0, 1), intArrayOf(1, 0))

        val result = classUnderTest.isLatinSquare(square)

        assertFalse(result)
    }

    @Test
    fun notSquare_shouldReturnFalse() {
        val square: Array<IntArray> = arrayOf(intArrayOf(1,2))

        val result = classUnderTest.isLatinSquare(square)

        assertFalse(result)
    }

    @Test
    fun empty_shouldReturnFalse() {
        val square: Array<IntArray> = arrayOf(intArrayOf())

        val result = classUnderTest.isLatinSquare(square)

        assertFalse(result)
    }

    @Test
    fun empty2_shouldReturnFalse() {
        val square: Array<IntArray> = arrayOf()

        val result = classUnderTest.isLatinSquare(square)

        assertFalse(result)
    }

    @Test
    fun oneElement_shouldReturnTrue() {
        val square: Array<IntArray> = arrayOf(intArrayOf(1))

        val result = classUnderTest.isLatinSquare(square)

        assertTrue(result)
    }
}
